/*! jQuery v3.7.1 | (c) OpenJS
Foundation and other contributors | jquery.org/license */
!function(global, factory) {
    "use strict";
    if (typeof module === "object" && typeof module.exports === "object") {
        module.exports = global.document ? factory(global, true) : function(global) {
            if (!global.document) {
                throw new Error("jQuery requires a window with a document");
            }
            return factory(global);
        };
    } else {
        factory(global);
    }
}(
    typeof window !== "undefined" ? window : this,
    function(window, noGlobal) {
        "use strict";
        
        var arr = [];
        var class2type = {};
        var hasOwn = class2type.hasOwnProperty;
        var toString = class2type.toString;
        var getPrototypeOf = Object.getPrototypeOf;
        var slice = arr.slice;
        var flat = arr.flat ? function(array) {
            return arr.flat.call(array);
        } : function(array) {
            return arr.concat.apply([], array);
        };
        var push = arr.push;
        var indexOf = arr.indexOf;
        var support = {};
        var document = window.document;
        var version = "3.7.1";

        function isFunction(obj) {
            return typeof obj === "function" && typeof obj.nodeType !== "number";
        }

        function isWindow(obj) {
            return obj != null && obj === obj.window;
        }

        function isPlainObject(obj) {
            var proto;
            if (!obj || toString.call(obj) !== "[object Object]") {
                return false;
            }
            proto = getPrototypeOf(obj);
            return proto === null || hasOwn.call(proto, "constructor") && proto.constructor === Object;
        }

        function isEmptyObject(obj) {
            var name;
            for (name in obj) {
                return false;
            }
            return true;
        }

        function globalEval(code, options) {
            var script = document.createElement("script");
            script.text = code;
            if (options) {
                for (var key in options) {
                    script.setAttribute(key, options[key]);
                }
            }
            document.head.appendChild(script).parentNode.removeChild(script);
        }

        function each(obj, callback) {
            var length, i = 0;
            if (isArrayLike(obj)) {
                length = obj.length;
                for (; i < length; i++) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                        break;
                    }
                }
            } else {
                for (i in obj) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                        break;
                    }
                }
            }
            return obj;
        }

        function isArrayLike(obj) {
            var length = !!obj && "length" in obj && obj.length;
            var type = toString.call(obj);
            if (isFunction(obj) || isWindow(obj)) {
                return false;
            }
            return type === "[object Array]" || length === 0 || typeof length === "number" && length > 0 && (length - 1) in obj;
        }

        var jQuery = function(selector, context) {
            return new jQuery.fn.init(selector, context);
        };

        jQuery.fn = jQuery.prototype = {
            jquery: version,
            constructor: jQuery,
            length: 0,
            toArray: function() {
                return slice.call(this);
            },
            get: function(num) {
                return num == null ? slice.call(this) : (num < 0 ? this[num + this.length] : this[num]);
            },
            pushStack: function(elems) {
                var ret = jQuery.merge(this.constructor(), elems);
                ret.prevObject = this;
                return ret;
            },
            each: function(callback) {
                return each(this, callback);
            },
            map: function(callback) {
                return this.pushStack(jQuery.map(this, function(elem, i) {
                    return callback.call(elem, i, elem);
                }));
            },
            slice: function() {
                return this.pushStack(slice.apply(this, arguments));
            },
            first: function() {
                return this.eq(0);
            },
            last: function() {
                return this.eq(-1);
            },
            even: function() {
                return this.pushStack(jQuery.grep(this, function(elem, i) {
                    return (i + 1) % 2;
                }));
            },
            odd: function() {
                return this.pushStack(jQuery.grep(this, function(elem, i) {
                    return i % 2;
                }));
            },
            eq: function(i) {
                var length = this.length;
                var j = +i + (i < 0 ? length : 0);
                return this.pushStack(0 <= j && j < length ? [this[j]] : []);
            },
            end: function() {
                return this.prevObject || this.constructor();
            }
        };

        jQuery.extend = jQuery.fn.extend = function() {
            var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {},
                i = 1,
                length = arguments.length,
                deep = false;

            if (typeof target === "boolean") {
                deep = target;
                target = arguments[i] || {};
                i++;
            }

            if (typeof target !== "object" && !isFunction(target)) {
                target = {};
            }

            if (i === length) {
                target = this;
                i--;
            }

            for (; i < length; i++) {
                if ((options = arguments[i]) != null) {
                    for (name in options) {
                        src = target[name];
                        copy = options[name];

                        if (target === copy) {
                            continue;
                        }

                        if (deep && copy && (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                            if (copyIsArray) {
                                copyIsArray = false;
                                clone = src && Array.isArray(src) ? src : [];
                            } else {
                                clone = src && isPlainObject(src) ? src : {};
                            }

                            target[name] = jQuery.extend(deep, clone, copy);
                        } else if (copy !== undefined) {
                            target[name] = copy;
                        }
                    }
                }
            }

            return target;
        };

        jQuery.extend({
            expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
            isReady: true,
            error: function(msg) {
                throw new Error(msg);
            },
            noop: function() {},
            isPlainObject: isPlainObject,
            isEmptyObject: isEmptyObject,
            globalEval: globalEval,
            each: each,
            text: function(elem) {
                var node;
                var ret = "";
                var i = 0;
                if (!elem) {
                    return "";
                }
                if (elem.nodeType === 1 || elem.nodeType === 9 || elem.nodeType === 11) {
                    if (elem.textContent) {
                        return elem.textContent;
                    } else {
                        for (; (node = elem[i++]); ) {
                            ret += jQuery.text(node);
                        }
                    }
                } else if (elem.nodeType === 3 || elem.nodeType === 4) {
                    return elem.nodeValue;
                }
                return ret;
            },
            makeArray: function(arr, results) {
                var ret = results || [];
                if (arr != null) {
                    if (isArrayLike(arr)) {
                        jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
                    } else {
                        push.call(ret, arr);
                    }
                }
                return ret;
            },
            inArray: function(elem, arr, i) {
                return arr == null ? -1 : indexOf.call(arr, elem, i);
            },
            isXMLDoc: function(elem) {
                var namespace = elem && elem.namespaceURI;
                var docElem = elem && (elem.ownerDocument || elem).documentElement;
                return !/^HTML$/i.test(namespace || (docElem && docElem.nodeName) || "HTML");
            },
            merge: function(first, second) {
                var l = +second.length;
                var i = 0;
                var j = first.length;

                for (; i < l; i++) {
                    first[j++] = second[i];
                }

                first.length = j;
                return first;
            },
            grep: function(elems, callback, invert) {
                var callbackInverse;
                var matches = [];
                var i = 0;
                var length = elems.length;
                var callbackExpect = !invert;

                for (; i < length; i++) {
                    callbackInverse = !callback(elems[i], i);
                    if (callbackInverse !== callbackExpect) {
                        matches.push(elems[i]);
                    }
                }

                return matches;
            },
            map: function(elems, callback, arg) {
                var length, value;
                var i = 0;
                var ret = [];

                if (isArrayLike(elems)) {
                    length = elems.length;
                    for (; i < length; i++) {
                        value = callback(elems[i], i, arg);
                        if (value != null) {
                            ret.push(value);
                        }
                    }
                } else {
                    for (i in elems) {
                        value = callback(elems[i], i, arg);
                        if (value != null) {
                            ret.push(value);
                        }
                    }
                }

                return flat(ret);
            },
            